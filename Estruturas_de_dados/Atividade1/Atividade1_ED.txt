Universidade Anhembi Morumbi
Estrutura de dados – Atividade 1
Implemente um programa para cadastro de alunos de uma disciplina utilizando a linguagem Java, seguindo os seguintes critérios: 
1 - Criar uma estrutura heterogênea (array) do tipo String para cadastrar o nome de 25 alunos; 
Garantir que a estrutura seja totalmente preenchida. 

Arquivo - Alunos.java
package Atividade1.Escola; //Declaração do pacote em que a classe está
import java.util.Scanner; // importação da biblioteca do Java para leitura de dados do usuário

public class Alunos { 
    public static void main(String[] args) {
        String[] nomeAluno = new String[25]; // criação do array de strings para armazenar os nomes dos alunos
        Scanner lerNomeAlunoScanner = new Scanner(System.in); // criação do objeto Scanner para ler as entradas do usuário

        // Laço for para ler os nomes dos alunos e armazená-los no array
        for(int i = 0; i < nomeAluno.length; i++) { 
            System.out.print("Digite o nome do aluno " + (i + 1) + ": "); // solicitação do nome do aluno ao usuário
            nomeAluno[i] = lerNomeAlunoScanner.nextLine(); // armazenamento do nome do aluno no array na posição i
        }
        lerNomeAlunoScanner.close(); // notificação para fechar o objeto Scanner após a leitura

        // Impressão dos nomes dos alunos cadastrados
        System.out.println("\nOs alunos cadastrados sao: ");
        for(int i = 0; i < nomeAluno.length; i++) { // laço for para percorrer o array e imprimir os nomes dos alunos
            System.out.println((i + 1) + ". " + nomeAluno[i]); // impressão do nome do aluno na posição i
        }
    }
}
==================================================================

Após implementar o programa e preencher o array com o nome dos alunos, cadastre mais 5 novos alunos.  
2 - Qual a dificuldade de inserir os novos alunos nessa estrutura de dados? Justifique a sua resposta direcionando aos conceitos de gerenciamento de memória.
Resposta:
O gerenciamento de memória em Java é feito de forma automática pelo garbage collector, que libera a memória alocada para objetos que não são mais utilizados pelo programa. O garbage collector é um mecanismo presente na linguagem de programação Java que gerencia a memória utilizada pelo programa. Ele é responsável por identificar e eliminar objetos que não são mais referenciados pelo programa, que não estão sendo utilizados, liberando assim espaço na memória. No entanto, em relação à estrutura heterogênea do tipo array utilizada para armazenar os nomes dos alunos, há uma limitação quanto ao seu tamanho. Isso significa que, ao criar um array com tamanho fixo, é impossível adicionar novos elementos caso o tamanho já tenha sido atingido.
No caso específico descrito na questão, foi criado um programa com array de tamanho 25 para armazenar os nomes dos alunos. Portanto, caso sejam inseridos mais de 25 alunos, não haverá espaço disponível na estrutura de dados para armazená-los. Uma possível solução seria criar uma estrutura de dados com tamanho maior e copiar os elementos do array anterior para a nova estrutura.
Os arrays em Java têm tamanho fixo. É necessário saber o tamanho do array no momento de sua criação e, em geral, o tamanho do array não pode ser alterado posteriormente (DEITEL & DEITEL, 2017, p.192). Além disso, caso seja necessário adicionar mais elementos a um array existente, será necessário criar um array com um tamanho maior e copiar os elementos do array original para o novo array (DEITEL & DEITEL, 2017). Outra possibilidade é a utilização de estruturas de dados pré-construídas do Java a partir das classes de coleções de API Java, como a coleção ArrayList, que oferecem capacidades melhores do que os arrays tradicionais. ArrayLists oferecem funcionalidades adicionais, como o redimensionamento dinâmico, conforme necessário para acomodar mais ou menos elementos (DEITEL & DEITEL, 2017).
Portanto, a dificuldade de inserir novos alunos na estrutura heterogênea do tipo array utilizada no programa está relacionada à sua limitação de tamanho fixo. A solução para esse problema envolve a criação de uma nova estrutura de dados com tamanho maior e a cópia dos elementos do array anterior para a nova estrutura.

Resposta complementar
Nesse código, a classe ArrayList é utilizada em vez de um array fixo para armazenar os nomes dos alunos. Ao invés de especificar um tamanho fixo para a estrutura de dados, a classe ArrayList permite que a estrutura seja redimensionada dinamicamente, adicionando ou removendo elementos conforme necessário.

No código acima, o método add() da classe ArrayList é utilizado para adicionar os nomes dos alunos, tanto para os 25 primeiros alunos quanto para os 5 novos alunos. Para imprimir a lista de alunos cadastrados, o método size() é utilizado para obter o número de elementos na estrutura, e o método get() é utilizado para acessar cada elemento pelo seu índice.
package Atividade1.Escola1; //Declaração do pacote em que a classe está
import java.util.ArrayList; //Importação da classe ArrayList
import java.util.Scanner; //Importação da classe Scanner

public class Alunos1 { //Declaração da classe

    public static void main(String[] args) { //Declaração do método principal da classe

        ArrayList<String> nomeAluno = new ArrayList<String>(); //Criação de um objeto ArrayList para armazenar os nomes dos alunos
        Scanner lerNomeAlunoScanner = new Scanner(System.in); //Criação de um objeto Scanner para ler o nome dos alunos

        //cadastro dos 25 alunos
        for(int i = 0; i < 25; i++) { //Laço para cadastrar os 25 alunos
            System.out.print("Digite o nome do aluno " + (i + 1) + ": "); //Exibe a mensagem para o usuário digitar o nome do aluno
            nomeAluno.add(lerNomeAlunoScanner.nextLine()); //Adiciona o nome do aluno ao ArrayList
        }

        //cadastro dos 5 novos alunos
        for(int i = 0; i < 5; i++) { //Laço para cadastrar os 5 novos alunos
            System.out.print("Digite o nome do novo aluno " + (i + 1) + ": "); //Exibe a mensagem para o usuário digitar o nome do novo aluno
            nomeAluno.add(lerNomeAlunoScanner.nextLine()); //Adiciona o nome do novo aluno ao ArrayList
        }

        lerNomeAlunoScanner.close(); //Fecha o objeto Scanner

        System.out.println("\nOs alunos cadastrados sao: "); //Exibe a mensagem informando que serão exibidos os alunos cadastrados
        for(int i = 0; i < nomeAluno.size(); i++) { //Laço para exibir os alunos cadastrados
            System.out.println((i + 1) + ". " + nomeAluno.get(i)); //Exibe o número e o nome do aluno
        }
    }
}

Referência
DEITEL, P. J., & DEITEL, H. M. (2016). Java: como programar. 10ª Ed.  Pearson Education do Brasil. Tradução: FURMANKIEWICZ, E. e revisão técnica: LUCCHINI, F. 934p.

